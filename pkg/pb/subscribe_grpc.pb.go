// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/pb/subscribe.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscribeServiceClient is the client API for SubscribeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscribeServiceClient interface {
	WatchWriterEvent(ctx context.Context, in *WriterEventSubcribeRequest, opts ...grpc.CallOption) (SubscribeService_WatchWriterEventClient, error)
	ListReader(ctx context.Context, in *ListReaderRequest, opts ...grpc.CallOption) (*ListReaderResponse, error)
}

type subscribeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscribeServiceClient(cc grpc.ClientConnInterface) SubscribeServiceClient {
	return &subscribeServiceClient{cc}
}

func (c *subscribeServiceClient) WatchWriterEvent(ctx context.Context, in *WriterEventSubcribeRequest, opts ...grpc.CallOption) (SubscribeService_WatchWriterEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscribeService_ServiceDesc.Streams[0], "/pb.SubscribeService/WatchWriterEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscribeServiceWatchWriterEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscribeService_WatchWriterEventClient interface {
	Recv() (*WriterEventResponse, error)
	grpc.ClientStream
}

type subscribeServiceWatchWriterEventClient struct {
	grpc.ClientStream
}

func (x *subscribeServiceWatchWriterEventClient) Recv() (*WriterEventResponse, error) {
	m := new(WriterEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscribeServiceClient) ListReader(ctx context.Context, in *ListReaderRequest, opts ...grpc.CallOption) (*ListReaderResponse, error) {
	out := new(ListReaderResponse)
	err := c.cc.Invoke(ctx, "/pb.SubscribeService/ListReader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribeServiceServer is the server API for SubscribeService service.
// All implementations must embed UnimplementedSubscribeServiceServer
// for forward compatibility
type SubscribeServiceServer interface {
	WatchWriterEvent(*WriterEventSubcribeRequest, SubscribeService_WatchWriterEventServer) error
	ListReader(context.Context, *ListReaderRequest) (*ListReaderResponse, error)
	mustEmbedUnimplementedSubscribeServiceServer()
}

// UnimplementedSubscribeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscribeServiceServer struct {
}

func (UnimplementedSubscribeServiceServer) WatchWriterEvent(*WriterEventSubcribeRequest, SubscribeService_WatchWriterEventServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchWriterEvent not implemented")
}
func (UnimplementedSubscribeServiceServer) ListReader(context.Context, *ListReaderRequest) (*ListReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReader not implemented")
}
func (UnimplementedSubscribeServiceServer) mustEmbedUnimplementedSubscribeServiceServer() {}

// UnsafeSubscribeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscribeServiceServer will
// result in compilation errors.
type UnsafeSubscribeServiceServer interface {
	mustEmbedUnimplementedSubscribeServiceServer()
}

func RegisterSubscribeServiceServer(s grpc.ServiceRegistrar, srv SubscribeServiceServer) {
	s.RegisterService(&SubscribeService_ServiceDesc, srv)
}

func _SubscribeService_WatchWriterEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WriterEventSubcribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscribeServiceServer).WatchWriterEvent(m, &subscribeServiceWatchWriterEventServer{stream})
}

type SubscribeService_WatchWriterEventServer interface {
	Send(*WriterEventResponse) error
	grpc.ServerStream
}

type subscribeServiceWatchWriterEventServer struct {
	grpc.ServerStream
}

func (x *subscribeServiceWatchWriterEventServer) Send(m *WriterEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscribeService_ListReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServiceServer).ListReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscribeService/ListReader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServiceServer).ListReader(ctx, req.(*ListReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscribeService_ServiceDesc is the grpc.ServiceDesc for SubscribeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscribeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SubscribeService",
	HandlerType: (*SubscribeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReader",
			Handler:    _SubscribeService_ListReader_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchWriterEvent",
			Handler:       _SubscribeService_WatchWriterEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/pb/subscribe.proto",
}
